name: APEX CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Type check
      run: npm run type-check
      continue-on-error: true  # Non-blocking initially
    
    - name: Run tests
      run: npm test -- --coverage
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: apex-coverage
    
    - name: Build
      run: |
        if [ -f "tsconfig.json" ]; then
          npm run build
        else
          echo "No TypeScript config found, skipping build"
        fi

  example-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Validate todo-app example
      run: |
        cd examples/todo-app
        npm install
        npm test --if-present
    
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-docs-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-docs-
    
    - name: Check documentation
      run: |
        # Check for broken links in markdown files
        npx markdown-link-check README.md
        npx markdown-link-check CONTRIBUTING.md
        
        # Verify all command docs exist
        for cmd in plan execute quality finalize system; do
          if [ ! -f "src/commands/$cmd/README.md" ]; then
            echo "Missing documentation for $cmd command"
            exit 1
          fi
        done